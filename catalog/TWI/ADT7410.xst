<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<xst path='/$YS/TYPES/TWI/ADT7410' s='{"Children":{},"hint":"High accuracy digital temperature sensor","default":0,"editor":"Enum","enum":"TwiStatus","manifest":{"MQTT-SN":{"tag":"---"},"TWI":{"addr":0},"type":"TWI/ADT7410"},"mi":{"TWI":{"attr":1,"mi":{"addr":{"attr":1,"default":0,"type":"Integer"}}}},"src":"class ADT7410{\r\n  constructor(){\r\n    setTimeout(this.Init.bind(this), 500*(1+Math.random()));\r\n  }\r\n  Init(){\r\n    this.addr=(this.GetField(null,\"TWI.addr\") | 0x48);\r\n    this.TwiReq([this.addr, 0x00, 0x01, 0x01, 0x0B])\t\t// Read chipID\r\n      .then(this.Init0.bind(this), this.RespE.bind(this))   // Write Configuration register\r\n      .then(this.Init1.bind(this), this.RespE.bind(this));  // Start\r\n  }\r\n  Init0(buf){\r\n    if(buf[1] == 0x20 &amp;&amp; (buf[4] &amp; 0xF8) == 0xC8){\r\n      return this.TwiReq([this.addr, 0x00, 0x01, 0x00, 0x80]);  //Resolution - 16 bit, Operation mode - continuous conversion\r\n    }\r\n  }\r\n  Init1(buf){\r\n    setTimeout(this.Read.bind(this), 500*(1+Math.random()));\r\n  }\r\n  Read(){\r\n    this.TwiReq([this.addr, 0x00, 0x01, 0x02, 0x00]).then(this.RespM.bind(this), this.RespE.bind(this));\r\n  }\r\n  RespM(buf){\r\n    this.SetState(null, 1);\r\n    let tmp = (buf[4] &lt;&lt; 8) | buf[5];\r\n    this.SetState(\"T\", ((tmp&amp;0x8000)?(tmp-65535):tmp) / 128);\r\n    setTimeout(this.Read.bind(this), 6000);\r\n  }\r\n  RespE(e){\r\n    this.SetState(null, 0);\r\n    setTimeout(this.Init.bind(this), 60000*(1+Math.random()));\r\n  }\r\n}"}' m='{"attr":69,"type":"Ext/TwiDev"}' ver='0.4.2304.19679' />